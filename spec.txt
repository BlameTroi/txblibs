A rough specification for a priority queue
------------------------------------------

A priority queue (pq) is a store and retrieve data type that returns
items in a priority ordering.


Required API
------------

There are a few functions required to use a pq:

| name     | return type | notes                                  |
|----------+-------------+----------------------------------------|
| empty    | boolean     | test if the queue has elements         |
| put      | element     | add item to queue with the specified   |
|          |             | priority                               |
| get      | element     | removes the highest priority element   |
|          |             | from the queue and returns it          |
| peek     | element     | returns the highest priority element   |
|          |             | but leaves it on the queue             |
| create   | *pq         | initialize the queue                   |
| destroy  |             | terminate the queue                    |
| count    | integer     | how many elements are on the queue     |


Implementation Notes
--------------------

I've become a fan of single file header libraries. There will be a
standard named type for the elements with my customary payload
pointer. This might break down if you need multiple priority queues
in one name space, but that shouldn't be an issue for my work.

While I don't need thread support, it's available as an option on
the create. a pthread mutex is used to lock and unlock the queue
if threading is enabled.

A doubly linked list will allow for easy insertions and deletions
even though we could get by with a singly linked list. Element
removal or peeking just needs to access the head and tail of the
list.

The client program is responsible for allocating and releasing element
storage.
